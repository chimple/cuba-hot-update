{"version":3,"file":"static/js/602.09338c35.chunk.js","mappings":"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","sources":["../node_modules/@firebase/remote-config/src/client/remote_config_fetch_client.ts","../node_modules/@firebase/remote-config/src/constants.ts","../node_modules/@firebase/remote-config/src/errors.ts","../node_modules/@firebase/remote-config/src/value.ts","../node_modules/@firebase/remote-config/src/api.ts","../node_modules/@firebase/remote-config/src/client/caching_client.ts","../node_modules/@firebase/remote-config/src/language.ts","../node_modules/@firebase/remote-config/src/client/rest_client.ts","../node_modules/@firebase/remote-config/src/client/retrying_client.ts","../node_modules/@firebase/remote-config/src/remote_config.ts","../node_modules/@firebase/remote-config/src/storage/storage.ts","../node_modules/@firebase/remote-config/src/storage/storage_cache.ts","../node_modules/@firebase/remote-config/src/api2.ts","../node_modules/@firebase/remote-config/src/register.ts","../node_modules/@capacitor-firebase/remote-config/src/web.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e as Error, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if ((originalError as Error)?.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: (originalError as Error)?.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: (originalError as Error)?.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e as Error)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError as Error)?.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: (error as Error)?.message\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n","import { WebPlugin } from '@capacitor/core';\nimport {\n  activate,\n  fetchAndActivate,\n  fetchConfig,\n  getBoolean,\n  getNumber,\n  getRemoteConfig,\n  getString,\n} from 'firebase/remote-config';\n\nimport type {\n  FirebaseRemoteConfigPlugin,\n  GetBooleanResult,\n  GetNumberResult,\n  GetOptions,\n  GetStringResult,\n  SetMinimumFetchIntervalOptions,\n} from './definitions';\n\nexport class FirebaseRemoteConfigWeb\n  extends WebPlugin\n  implements FirebaseRemoteConfigPlugin\n{\n  public async activate(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await activate(remoteConfig);\n  }\n\n  public async fetchAndActivate(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await fetchAndActivate(remoteConfig);\n  }\n\n  public async fetchConfig(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await fetchConfig(remoteConfig);\n  }\n\n  public async getBoolean(options: GetOptions): Promise<GetBooleanResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getBoolean(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async getNumber(options: GetOptions): Promise<GetNumberResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getNumber(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async getString(options: GetOptions): Promise<GetStringResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getString(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async setMinimumFetchInterval(\n    options: SetMinimumFetchIntervalOptions,\n  ): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    remoteConfig.settings.minimumFetchIntervalMillis =\n      options.minimumFetchIntervalInSeconds * 1000;\n  }\n}\n"],"names":["RemoteConfigAbortSignal","_classCallCheck","listeners","_createClass","key","value","listener","this","push","forEach","RC_COMPONENT_NAME","ERROR_DESCRIPTION_MAP","_ERROR_DESCRIPTION_MA","_defineProperty","ERROR_FACTORY","ErrorFactory","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","arguments","length","undefined","indexOf","toLowerCase","num","Number","isNaN","getRemoteConfig","app","getApp","getModularInstance","_getProvider","getImmediate","activate","_x","_activate","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee9","remoteConfig","rc","_yield$Promise$all5","_yield$Promise$all6","lastSuccessfulFetchResponse","activeConfigEtag","wrap","_context9","prev","next","Promise","all","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","sent","_slicedToArray","config","eTag","abrupt","_storageCache","setActiveConfig","setActiveConfigEtag","stop","fetchConfig","_x2","_fetchConfig","_callee11","abortSignal","lastFetchStatus","_context11","setTimeout","_callee10","_context10","abort","settings","fetchTimeoutMillis","_client","fetch","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","t0","e","errorCode","FirebaseError","code","getBoolean","getValue","asBoolean","getNumber","asNumber","getString","asString","_isInitializationComplete","_logger","debug","concat","activeConfig","getActiveConfig","defaultConfig","String","CachingClient","client","storage","storageCache","logger","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","Date","now","isCachedDataFresh","_fetch","_callee","request","_yield$Promise$all","_yield$Promise$all2","response","storageOperations","_context","getLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchTimestampMillis","status","setLastSuccessfulFetchResponse","_x3","getUserLanguage","navigatorLanguage","navigator","languages","language","RestClient","firebaseInstallations","sdkVersion","namespace","projectId","apiKey","appId","_fetch2","_x4","toString","_ref","_callee2","_yield$Promise$all3","_yield$Promise$all4","installationId","installationToken","urlBase","url","headers","requestBody","options","fetchPromise","timeoutPromise","responseEtag","state","responseBody","_context2","getId","getToken","window","FIREBASE_REMOTE_CONFIG_URL_BASE","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","method","body","JSON","stringify","_resolve","reject","addEventListener","error","Error","name","race","create","originalErrorMessage","message","get","json","t1","httpStatus","_x5","setAbortableTimeout","throttleEndTimeMillis","resolve","backoffMillis","Math","max","timeout","clearTimeout","isRetriableError","customData","RetryingClient","_fetch3","_callee3","throttleMetadata","_context3","getThrottleMetadata","backoffCount","attemptFetch","_x6","_attemptFetch","_callee4","_ref2","_context4","deleteThrottleMetadata","calculateBackoffMillis","setThrottleMetadata","_x7","_x8","RemoteConfig","getLastFetchStatus","toFirebaseError","event","originalError","target","APP_NAMESPACE_STORE","Storage","appName","openDbPromise","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","set","timestamp","etag","metadata","delete","_get","_callee5","_this","_context5","objectStore","transaction","compositeKey","createCompositeKey","_x9","_set","_callee6","_this2","_context6","put","_x10","_x11","_delete2","_callee7","_this3","_context7","_x12","join","StorageCache","_loadFromStorage","_callee8","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","_context8","timestampMillis","fetchAndActivate","_x13","_fetchAndActivate","_callee12","_context12","_registerComponent","Component","container","_ref3","instanceIdentifier","getProvider","installations","isIndexedDBAvailable","_app$options","Logger","logLevel","LogLevel","ERROR","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","_initializePromise","loadFromStorage","then","ensureInitialized","setMultipleInstances","registerVersion","version","FirebaseRemoteConfigWeb","_WebPlugin","_inherits","_super","_createSuper","_activate2","_fetchAndActivate2","_fetchConfig2","_getBoolean2","_getNumber2","_getString2","_setMinimumFetchInterval","minimumFetchIntervalInSeconds","WebPlugin"],"sourceRoot":""}